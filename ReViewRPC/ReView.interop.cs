/////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED, DON'T CHANGE IT //
/////////////////////////////////////////////////
using Lemniscate;
using System;
using System.IO;



namespace ReViewRPC
{
	public interface IReView_Feed
	{
		void SendBackBinaryData(long[] idList, int[] timeList, byte[][] dataList);

		void SelectionChanged(long selected_id);

		void DebugToggleChanged(string name, bool state);
	}


	public interface IReView_Tool
	{
		void Heartbeat(int time);

		void DebugToggleChanged(string name, bool state);

		void StoreBinaryData(long id, int time, byte[] data);
	}


	public interface IReView_HierarchicalTimelineLog
	{
		void SelectionChanged(long selected_id);

		void AddTrack(long parent_id, long id, string name);

		void AddItem(long parent_id, long id, int time, string name);

		void AddGenericItem(long parent_id, long id, int time, string name);

		void EndItem(long id, int time);

		void AppendLog(long id, int time, uint flags, string content);
	}


	public interface IReView_RemoteDebugRenderer
	{
		void RemoveAllPrimitives(int time);

		void RemoveAllAnnotations(int time);

		void AddAnnotation(long primitive_id, int time, int duration, string text, ReView.Color32 color);

		void AddBox(long id, int time, int duration, ReView.Matrix4x4 transform, ReView.Vector3 pivot, ReView.Vector3 half_size, ReView.Color32 color);

		void RemovePrimitive(long primitive_id, int time);

		void RemoveAnnotation(long primitive_id, int time);

		void AddCylinder(long id, int time, int duration, ReView.Matrix4x4 transform, ReView.Vector3 pivot, double top_radius, double bottom_radius_scale, double height, int segments, ReView.Color32 color, bool create_caps);

		void AddCone(long id, int time, int duration, ReView.Matrix4x4 transform, ReView.Vector3 pivot, double radius, double height, int segments, ReView.Color32 color, bool create_caps);

		void AddMesh(long id, int time, int duration, ReView.Matrix4x4 transform, ReView.Vector3 pivot);

		void AddTriangle(long mesh_id, int time, ReView.Vector3 a, ReView.Vector3 b, ReView.Vector3 c, ReView.Color32 color);

		void AddLine(long id, int time, int duration, ReView.Vector3 start, ReView.Vector3 end, ReView.Color32 color);

		void AddCircle(long id, int time, int duration, ReView.Vector3 center, double radius, ReView.Vector3 up, int segments, ReView.Color32 color);
	}


	public class RPC_Client_Proxy_IReView_Tool : RPC_Client_Proxy, IReView_Tool
	{
		public RPC_Client_Proxy_IReView_Tool(Linear_Serializer serializer) : base(serializer){ Channel_ID = 1; }

		public void Heartbeat(int time)
		{
			Begin();
			const byte method_index = 0;
			serializer.Serialize(method_index);
			serializer.Serialize(time);
			Flip(); //switch from sending to receiving
			End();
		}

		public void DebugToggleChanged(string name, bool state)
		{
			Begin();
			const byte method_index = 1;
			serializer.Serialize(method_index);
			serializer.Serialize(name);
			serializer.Serialize(state);
			Flip(); //switch from sending to receiving
			End();
		}

		public void StoreBinaryData(long id, int time, byte[] data)
		{
			Begin();
			const byte method_index = 2;
			serializer.Serialize(method_index);
			serializer.Serialize(id);
			serializer.Serialize(time);
			serializer.Serialize(data);
			Flip(); //switch from sending to receiving
			End();
		}
	}


	public class RPC_Server_Proxy_IReView_Tool : RPC_Server_Proxy<IReView_Tool>
	{
		public RPC_Server_Proxy_IReView_Tool(Linear_Serializer serializer, IReView_Tool obj) : base(serializer, obj){ Channel_ID = 1; }

		public override void Receive_Call()
		{
			byte method_index;
			serializer.Deserialize(out method_index);
			switch(method_index)
			{
				case 0: //Heartbeat
				{
					Begin();
					int time;
					serializer.Deserialize(out time);
					Flip(); //switch from receiving to sending
					this.obj.Heartbeat(time);
					End();
				}
				break;

				case 1: //DebugToggleChanged
				{
					Begin();
					string name;
					serializer.Deserialize(out name);
					bool state;
					serializer.Deserialize(out state);
					Flip(); //switch from receiving to sending
					this.obj.DebugToggleChanged(name, state);
					End();
				}
				break;

				case 2: //StoreBinaryData
				{
					Begin();
					long id;
					serializer.Deserialize(out id);
					int time;
					serializer.Deserialize(out time);
					byte[] data;
					serializer.Deserialize(out data);
					Flip(); //switch from receiving to sending
					this.obj.StoreBinaryData(id, time, data);
					End();
				}
				break;

				default:
				{
					On_Invalid_Method_Index(method_index);
				}
				break;
			}
		}
	}


	public class RPC_Client_Proxy_IReView_HierarchicalTimelineLog : RPC_Client_Proxy, IReView_HierarchicalTimelineLog
	{
		public RPC_Client_Proxy_IReView_HierarchicalTimelineLog(Linear_Serializer serializer) : base(serializer){ Channel_ID = 2; }

		public void SelectionChanged(long selected_id)
		{
			Begin();
			const byte method_index = 0;
			serializer.Serialize(method_index);
			serializer.Serialize(selected_id);
			Flip(); //switch from sending to receiving
			End();
		}

		public void AddTrack(long parent_id, long id, string name)
		{
			Begin();
			const byte method_index = 1;
			serializer.Serialize(method_index);
			serializer.Serialize(parent_id);
			serializer.Serialize(id);
			serializer.Serialize(name);
			Flip(); //switch from sending to receiving
			End();
		}

		public void AddItem(long parent_id, long id, int time, string name)
		{
			Begin();
			const byte method_index = 2;
			serializer.Serialize(method_index);
			serializer.Serialize(parent_id);
			serializer.Serialize(id);
			serializer.Serialize(time);
			serializer.Serialize(name);
			Flip(); //switch from sending to receiving
			End();
		}

		public void AddGenericItem(long parent_id, long id, int time, string name)
		{
			Begin();
			const byte method_index = 3;
			serializer.Serialize(method_index);
			serializer.Serialize(parent_id);
			serializer.Serialize(id);
			serializer.Serialize(time);
			serializer.Serialize(name);
			Flip(); //switch from sending to receiving
			End();
		}

		public void EndItem(long id, int time)
		{
			Begin();
			const byte method_index = 4;
			serializer.Serialize(method_index);
			serializer.Serialize(id);
			serializer.Serialize(time);
			Flip(); //switch from sending to receiving
			End();
		}

		public void AppendLog(long id, int time, uint flags, string content)
		{
			Begin();
			const byte method_index = 5;
			serializer.Serialize(method_index);
			serializer.Serialize(id);
			serializer.Serialize(time);
			serializer.Serialize(flags);
			serializer.Serialize(content);
			Flip(); //switch from sending to receiving
			End();
		}
	}


	public class RPC_Server_Proxy_IReView_HierarchicalTimelineLog : RPC_Server_Proxy<IReView_HierarchicalTimelineLog>
	{
		public RPC_Server_Proxy_IReView_HierarchicalTimelineLog(Linear_Serializer serializer, IReView_HierarchicalTimelineLog obj) : base(serializer, obj){ Channel_ID = 2; }

		public override void Receive_Call()
		{
			byte method_index;
			serializer.Deserialize(out method_index);
			switch(method_index)
			{
				case 0: //SelectionChanged
				{
					Begin();
					long selected_id;
					serializer.Deserialize(out selected_id);
					Flip(); //switch from receiving to sending
					this.obj.SelectionChanged(selected_id);
					End();
				}
				break;

				case 1: //AddTrack
				{
					Begin();
					long parent_id;
					serializer.Deserialize(out parent_id);
					long id;
					serializer.Deserialize(out id);
					string name;
					serializer.Deserialize(out name);
					Flip(); //switch from receiving to sending
					this.obj.AddTrack(parent_id, id, name);
					End();
				}
				break;

				case 2: //AddItem
				{
					Begin();
					long parent_id;
					serializer.Deserialize(out parent_id);
					long id;
					serializer.Deserialize(out id);
					int time;
					serializer.Deserialize(out time);
					string name;
					serializer.Deserialize(out name);
					Flip(); //switch from receiving to sending
					this.obj.AddItem(parent_id, id, time, name);
					End();
				}
				break;

				case 3: //AddGenericItem
				{
					Begin();
					long parent_id;
					serializer.Deserialize(out parent_id);
					long id;
					serializer.Deserialize(out id);
					int time;
					serializer.Deserialize(out time);
					string name;
					serializer.Deserialize(out name);
					Flip(); //switch from receiving to sending
					this.obj.AddGenericItem(parent_id, id, time, name);
					End();
				}
				break;

				case 4: //EndItem
				{
					Begin();
					long id;
					serializer.Deserialize(out id);
					int time;
					serializer.Deserialize(out time);
					Flip(); //switch from receiving to sending
					this.obj.EndItem(id, time);
					End();
				}
				break;

				case 5: //AppendLog
				{
					Begin();
					long id;
					serializer.Deserialize(out id);
					int time;
					serializer.Deserialize(out time);
					uint flags;
					serializer.Deserialize(out flags);
					string content;
					serializer.Deserialize(out content);
					Flip(); //switch from receiving to sending
					this.obj.AppendLog(id, time, flags, content);
					End();
				}
				break;

				default:
				{
					On_Invalid_Method_Index(method_index);
				}
				break;
			}
		}
	}


	public class RPC_Client_Proxy_IReView_RemoteDebugRenderer : RPC_Client_Proxy, IReView_RemoteDebugRenderer
	{
		public RPC_Client_Proxy_IReView_RemoteDebugRenderer(Linear_Serializer serializer) : base(serializer){ Channel_ID = 3; }

		public void RemoveAllPrimitives(int time)
		{
			Begin();
			const byte method_index = 0;
			serializer.Serialize(method_index);
			serializer.Serialize(time);
			Flip(); //switch from sending to receiving
			End();
		}

		public void RemoveAllAnnotations(int time)
		{
			Begin();
			const byte method_index = 1;
			serializer.Serialize(method_index);
			serializer.Serialize(time);
			Flip(); //switch from sending to receiving
			End();
		}

		public void AddAnnotation(long primitive_id, int time, int duration, string text, ReView.Color32 color)
		{
			Begin();
			const byte method_index = 2;
			serializer.Serialize(method_index);
			serializer.Serialize(primitive_id);
			serializer.Serialize(time);
			serializer.Serialize(duration);
			serializer.Serialize(text);
			serializer.Serialize(color);
			Flip(); //switch from sending to receiving
			End();
		}

		public void AddBox(long id, int time, int duration, ReView.Matrix4x4 transform, ReView.Vector3 pivot, ReView.Vector3 half_size, ReView.Color32 color)
		{
			Begin();
			const byte method_index = 3;
			serializer.Serialize(method_index);
			serializer.Serialize(id);
			serializer.Serialize(time);
			serializer.Serialize(duration);
			serializer.Serialize(transform);
			serializer.Serialize(pivot);
			serializer.Serialize(half_size);
			serializer.Serialize(color);
			Flip(); //switch from sending to receiving
			End();
		}

		public void RemovePrimitive(long primitive_id, int time)
		{
			Begin();
			const byte method_index = 4;
			serializer.Serialize(method_index);
			serializer.Serialize(primitive_id);
			serializer.Serialize(time);
			Flip(); //switch from sending to receiving
			End();
		}

		public void RemoveAnnotation(long primitive_id, int time)
		{
			Begin();
			const byte method_index = 5;
			serializer.Serialize(method_index);
			serializer.Serialize(primitive_id);
			serializer.Serialize(time);
			Flip(); //switch from sending to receiving
			End();
		}

		public void AddCylinder(long id, int time, int duration, ReView.Matrix4x4 transform, ReView.Vector3 pivot, double top_radius, double bottom_radius_scale, double height, int segments, ReView.Color32 color, bool create_caps)
		{
			Begin();
			const byte method_index = 6;
			serializer.Serialize(method_index);
			serializer.Serialize(id);
			serializer.Serialize(time);
			serializer.Serialize(duration);
			serializer.Serialize(transform);
			serializer.Serialize(pivot);
			serializer.Serialize(top_radius);
			serializer.Serialize(bottom_radius_scale);
			serializer.Serialize(height);
			serializer.Serialize(segments);
			serializer.Serialize(color);
			serializer.Serialize(create_caps);
			Flip(); //switch from sending to receiving
			End();
		}

		public void AddCone(long id, int time, int duration, ReView.Matrix4x4 transform, ReView.Vector3 pivot, double radius, double height, int segments, ReView.Color32 color, bool create_caps)
		{
			Begin();
			const byte method_index = 7;
			serializer.Serialize(method_index);
			serializer.Serialize(id);
			serializer.Serialize(time);
			serializer.Serialize(duration);
			serializer.Serialize(transform);
			serializer.Serialize(pivot);
			serializer.Serialize(radius);
			serializer.Serialize(height);
			serializer.Serialize(segments);
			serializer.Serialize(color);
			serializer.Serialize(create_caps);
			Flip(); //switch from sending to receiving
			End();
		}

		public void AddMesh(long id, int time, int duration, ReView.Matrix4x4 transform, ReView.Vector3 pivot)
		{
			Begin();
			const byte method_index = 8;
			serializer.Serialize(method_index);
			serializer.Serialize(id);
			serializer.Serialize(time);
			serializer.Serialize(duration);
			serializer.Serialize(transform);
			serializer.Serialize(pivot);
			Flip(); //switch from sending to receiving
			End();
		}

		public void AddTriangle(long mesh_id, int time, ReView.Vector3 a, ReView.Vector3 b, ReView.Vector3 c, ReView.Color32 color)
		{
			Begin();
			const byte method_index = 9;
			serializer.Serialize(method_index);
			serializer.Serialize(mesh_id);
			serializer.Serialize(time);
			serializer.Serialize(a);
			serializer.Serialize(b);
			serializer.Serialize(c);
			serializer.Serialize(color);
			Flip(); //switch from sending to receiving
			End();
		}

		public void AddLine(long id, int time, int duration, ReView.Vector3 start, ReView.Vector3 end, ReView.Color32 color)
		{
			Begin();
			const byte method_index = 10;
			serializer.Serialize(method_index);
			serializer.Serialize(id);
			serializer.Serialize(time);
			serializer.Serialize(duration);
			serializer.Serialize(start);
			serializer.Serialize(end);
			serializer.Serialize(color);
			Flip(); //switch from sending to receiving
			End();
		}

		public void AddCircle(long id, int time, int duration, ReView.Vector3 center, double radius, ReView.Vector3 up, int segments, ReView.Color32 color)
		{
			Begin();
			const byte method_index = 11;
			serializer.Serialize(method_index);
			serializer.Serialize(id);
			serializer.Serialize(time);
			serializer.Serialize(duration);
			serializer.Serialize(center);
			serializer.Serialize(radius);
			serializer.Serialize(up);
			serializer.Serialize(segments);
			serializer.Serialize(color);
			Flip(); //switch from sending to receiving
			End();
		}
	}


	public class RPC_Server_Proxy_IReView_RemoteDebugRenderer : RPC_Server_Proxy<IReView_RemoteDebugRenderer>
	{
		public RPC_Server_Proxy_IReView_RemoteDebugRenderer(Linear_Serializer serializer, IReView_RemoteDebugRenderer obj) : base(serializer, obj){ Channel_ID = 3; }

		public override void Receive_Call()
		{
			byte method_index;
			serializer.Deserialize(out method_index);
			switch(method_index)
			{
				case 0: //RemoveAllPrimitives
				{
					Begin();
					int time;
					serializer.Deserialize(out time);
					Flip(); //switch from receiving to sending
					this.obj.RemoveAllPrimitives(time);
					End();
				}
				break;

				case 1: //RemoveAllAnnotations
				{
					Begin();
					int time;
					serializer.Deserialize(out time);
					Flip(); //switch from receiving to sending
					this.obj.RemoveAllAnnotations(time);
					End();
				}
				break;

				case 2: //AddAnnotation
				{
					Begin();
					long primitive_id;
					serializer.Deserialize(out primitive_id);
					int time;
					serializer.Deserialize(out time);
					int duration;
					serializer.Deserialize(out duration);
					string text;
					serializer.Deserialize(out text);
					ReView.Color32 color;
					serializer.Deserialize(out color);
					Flip(); //switch from receiving to sending
					this.obj.AddAnnotation(primitive_id, time, duration, text, color);
					End();
				}
				break;

				case 3: //AddBox
				{
					Begin();
					long id;
					serializer.Deserialize(out id);
					int time;
					serializer.Deserialize(out time);
					int duration;
					serializer.Deserialize(out duration);
					ReView.Matrix4x4 transform;
					serializer.Deserialize(out transform);
					ReView.Vector3 pivot;
					serializer.Deserialize(out pivot);
					ReView.Vector3 half_size;
					serializer.Deserialize(out half_size);
					ReView.Color32 color;
					serializer.Deserialize(out color);
					Flip(); //switch from receiving to sending
					this.obj.AddBox(id, time, duration, transform, pivot, half_size, color);
					End();
				}
				break;

				case 4: //RemovePrimitive
				{
					Begin();
					long primitive_id;
					serializer.Deserialize(out primitive_id);
					int time;
					serializer.Deserialize(out time);
					Flip(); //switch from receiving to sending
					this.obj.RemovePrimitive(primitive_id, time);
					End();
				}
				break;

				case 5: //RemoveAnnotation
				{
					Begin();
					long primitive_id;
					serializer.Deserialize(out primitive_id);
					int time;
					serializer.Deserialize(out time);
					Flip(); //switch from receiving to sending
					this.obj.RemoveAnnotation(primitive_id, time);
					End();
				}
				break;

				case 6: //AddCylinder
				{
					Begin();
					long id;
					serializer.Deserialize(out id);
					int time;
					serializer.Deserialize(out time);
					int duration;
					serializer.Deserialize(out duration);
					ReView.Matrix4x4 transform;
					serializer.Deserialize(out transform);
					ReView.Vector3 pivot;
					serializer.Deserialize(out pivot);
					double top_radius;
					serializer.Deserialize(out top_radius);
					double bottom_radius_scale;
					serializer.Deserialize(out bottom_radius_scale);
					double height;
					serializer.Deserialize(out height);
					int segments;
					serializer.Deserialize(out segments);
					ReView.Color32 color;
					serializer.Deserialize(out color);
					bool create_caps;
					serializer.Deserialize(out create_caps);
					Flip(); //switch from receiving to sending
					this.obj.AddCylinder(id, time, duration, transform, pivot, top_radius, bottom_radius_scale, height, segments, color, create_caps);
					End();
				}
				break;

				case 7: //AddCone
				{
					Begin();
					long id;
					serializer.Deserialize(out id);
					int time;
					serializer.Deserialize(out time);
					int duration;
					serializer.Deserialize(out duration);
					ReView.Matrix4x4 transform;
					serializer.Deserialize(out transform);
					ReView.Vector3 pivot;
					serializer.Deserialize(out pivot);
					double radius;
					serializer.Deserialize(out radius);
					double height;
					serializer.Deserialize(out height);
					int segments;
					serializer.Deserialize(out segments);
					ReView.Color32 color;
					serializer.Deserialize(out color);
					bool create_caps;
					serializer.Deserialize(out create_caps);
					Flip(); //switch from receiving to sending
					this.obj.AddCone(id, time, duration, transform, pivot, radius, height, segments, color, create_caps);
					End();
				}
				break;

				case 8: //AddMesh
				{
					Begin();
					long id;
					serializer.Deserialize(out id);
					int time;
					serializer.Deserialize(out time);
					int duration;
					serializer.Deserialize(out duration);
					ReView.Matrix4x4 transform;
					serializer.Deserialize(out transform);
					ReView.Vector3 pivot;
					serializer.Deserialize(out pivot);
					Flip(); //switch from receiving to sending
					this.obj.AddMesh(id, time, duration, transform, pivot);
					End();
				}
				break;

				case 9: //AddTriangle
				{
					Begin();
					long mesh_id;
					serializer.Deserialize(out mesh_id);
					int time;
					serializer.Deserialize(out time);
					ReView.Vector3 a;
					serializer.Deserialize(out a);
					ReView.Vector3 b;
					serializer.Deserialize(out b);
					ReView.Vector3 c;
					serializer.Deserialize(out c);
					ReView.Color32 color;
					serializer.Deserialize(out color);
					Flip(); //switch from receiving to sending
					this.obj.AddTriangle(mesh_id, time, a, b, c, color);
					End();
				}
				break;

				case 10: //AddLine
				{
					Begin();
					long id;
					serializer.Deserialize(out id);
					int time;
					serializer.Deserialize(out time);
					int duration;
					serializer.Deserialize(out duration);
					ReView.Vector3 start;
					serializer.Deserialize(out start);
					ReView.Vector3 end;
					serializer.Deserialize(out end);
					ReView.Color32 color;
					serializer.Deserialize(out color);
					Flip(); //switch from receiving to sending
					this.obj.AddLine(id, time, duration, start, end, color);
					End();
				}
				break;

				case 11: //AddCircle
				{
					Begin();
					long id;
					serializer.Deserialize(out id);
					int time;
					serializer.Deserialize(out time);
					int duration;
					serializer.Deserialize(out duration);
					ReView.Vector3 center;
					serializer.Deserialize(out center);
					double radius;
					serializer.Deserialize(out radius);
					ReView.Vector3 up;
					serializer.Deserialize(out up);
					int segments;
					serializer.Deserialize(out segments);
					ReView.Color32 color;
					serializer.Deserialize(out color);
					Flip(); //switch from receiving to sending
					this.obj.AddCircle(id, time, duration, center, radius, up, segments, color);
					End();
				}
				break;

				default:
				{
					On_Invalid_Method_Index(method_index);
				}
				break;
			}
		}
	}


	public class RPC_Client_Proxy_IReView_Feed : RPC_Client_Proxy, IReView_Feed
	{
		public RPC_Client_Proxy_IReView_Feed(Linear_Serializer serializer) : base(serializer){ Channel_ID = 0; }

		public void SendBackBinaryData(long[] idList, int[] timeList, byte[][] dataList)
		{
			Begin();
			const byte method_index = 0;
			serializer.Serialize(method_index);
			serializer.Serialize(idList);
			serializer.Serialize(timeList);
			serializer.Serialize(dataList);
			Flip(); //switch from sending to receiving
			End();
		}

		public void SelectionChanged(long selected_id)
		{
			Begin();
			const byte method_index = 1;
			serializer.Serialize(method_index);
			serializer.Serialize(selected_id);
			Flip(); //switch from sending to receiving
			End();
		}

		public void DebugToggleChanged(string name, bool state)
		{
			Begin();
			const byte method_index = 2;
			serializer.Serialize(method_index);
			serializer.Serialize(name);
			serializer.Serialize(state);
			Flip(); //switch from sending to receiving
			End();
		}
	}


	public class RPC_Server_Proxy_IReView_Feed : RPC_Server_Proxy<IReView_Feed>
	{
		public RPC_Server_Proxy_IReView_Feed(Linear_Serializer serializer, IReView_Feed obj) : base(serializer, obj){ Channel_ID = 0; }

		public override void Receive_Call()
		{
			byte method_index;
			serializer.Deserialize(out method_index);
			switch(method_index)
			{
				case 0: //SendBackBinaryData
				{
					Begin();
					long[] idList;
					serializer.Deserialize(out idList);
					int[] timeList;
					serializer.Deserialize(out timeList);
					byte[][] dataList;
					serializer.Deserialize(out dataList);
					Flip(); //switch from receiving to sending
					this.obj.SendBackBinaryData(idList, timeList, dataList);
					End();
				}
				break;

				case 1: //SelectionChanged
				{
					Begin();
					long selected_id;
					serializer.Deserialize(out selected_id);
					Flip(); //switch from receiving to sending
					this.obj.SelectionChanged(selected_id);
					End();
				}
				break;

				case 2: //DebugToggleChanged
				{
					Begin();
					string name;
					serializer.Deserialize(out name);
					bool state;
					serializer.Deserialize(out state);
					Flip(); //switch from receiving to sending
					this.obj.DebugToggleChanged(name, state);
					End();
				}
				break;

				default:
				{
					On_Invalid_Method_Index(method_index);
				}
				break;
			}
		}
	}
}
