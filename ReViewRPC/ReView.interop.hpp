/////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED, DON'T CHANGE IT //
/////////////////////////////////////////////////
#ifndef REVIEW_INTEROP_HPP
#define REVIEW_INTEROP_HPP

#include "interop.hpp"



class IReView_Feed
{
public:
	virtual void SendBackBinaryData(Vector<Int64> idList, Vector<Int32> timeList, Vector<Vector<Uint8>> dataList) =0;

	virtual void SelectionChanged(Int64 selected_id) =0;

	virtual void DebugToggleChanged(Char8 const * name, bool state) =0;
};


class IReView_StorageServer
{
public:
	virtual void RequestSessionList() =0;

	virtual void RequestSession(Int64 session_id) =0;

	virtual void PlaybackPositionChanged(Int32 playback_position_time) =0;
};


class IReView_Tool
{
public:
	virtual void Heartbeat(Int32 time) =0;

	virtual void SessionStart(Int64 id, Char8 const * name) =0;

	virtual void SessionEnd(Int64 id) =0;

	virtual void SessionListEntry(Int64 id, Char8 const * session_name, bool live) =0;

	virtual void DebugToggleChanged(Char8 const * name, bool state) =0;

	virtual void StoreBinaryData(Int64 id, Int32 time, Vector<Uint8> data) =0;
};


class IReView_HierarchicalTimelineLog
{
public:
	virtual void SelectionChanged(Int64 selected_id) =0;

	virtual void AddTrack(Int64 parent_id, Int64 id, Char8 const * name) =0;

	virtual void AddItem(Int64 parent_id, Int64 id, Int32 time, Char8 const * name) =0;

	virtual void AddGenericItem(Int64 parent_id, Int64 id, Int32 time, Char8 const * name) =0;

	virtual void EndItem(Int64 id, Int32 time) =0;

	virtual void AppendLog(Int64 id, Int32 time, Uint32 flags, Char8 const * content) =0;
};


class IReView_RemoteDebugRenderer
{
public:
	virtual void RemoveAllPrimitives(Int32 time) =0;

	virtual void RemoveAllAnnotations(Int32 time) =0;

	virtual void AddAnnotation(Int64 primitive_id, Int32 time, Int32 duration, Char8 const * text, Colorconst &  color) =0;

	virtual void AddBox(Int64 id, Int32 time, Int32 duration, Matrix3Dconst &  transform, Vector3Dconst &  pivot, Vector3Dconst &  half_size, Colorconst &  color) =0;

	virtual void RemovePrimitive(Int64 primitive_id, Int32 time) =0;

	virtual void RemoveAnnotation(Int64 primitive_id, Int32 time) =0;

	virtual void AddCylinder(Int64 id, Int32 time, Int32 duration, Matrix3Dconst &  transform, Vector3Dconst &  pivot, Float64 top_radius, Float64 bottom_radius_scale, Float64 height, Int32 segments, Colorconst &  color, bool create_caps) =0;

	virtual void AddCone(Int64 id, Int32 time, Int32 duration, Matrix3Dconst &  transform, Vector3Dconst &  pivot, Float64 radius, Float64 height, Int32 segments, Colorconst &  color, bool create_caps) =0;

	virtual void AddMesh(Int64 id, Int32 time, Int32 duration, Matrix3Dconst &  transform, Vector3Dconst &  pivot) =0;

	virtual void AddTriangle(Int64 mesh_id, Int32 time, Vector3Dconst &  a, Vector3Dconst &  b, Vector3Dconst &  c, Colorconst &  color) =0;

	virtual void AddLine(Int64 id, Int32 time, Int32 duration, Vector3Dconst &  start, Vector3Dconst &  end, Colorconst &  color) =0;

	virtual void AddCircle(Int64 id, Int32 time, Int32 duration, Vector3Dconst &  center, Float64 radius, Vector3Dconst &  up, Int32 segments, Colorconst &  color) =0;
};


template <typename T>
class RPC_Client_Proxy_IReView_Tool : public RPC_Client_Proxy<T>, public IReView_Tool
{
public:
	RPC_Client_Proxy_IReView_Tool(T& stream) : RPC_Client_Proxy(stream){}

public:
	void Heartbeat(Int32 time)
	{
		byte const method_index = 0;
		Serialize(stream, method_index);
		Serialize(stream, time);
		Flush(stream);
	}

	void SessionStart(Int64 id, Char8 const * name)
	{
		byte const method_index = 1;
		Serialize(stream, method_index);
		Serialize(stream, id);
		Serialize(stream, name);
		Flush(stream);
	}

	void SessionEnd(Int64 id)
	{
		byte const method_index = 2;
		Serialize(stream, method_index);
		Serialize(stream, id);
		Flush(stream);
	}

	void SessionListEntry(Int64 id, Char8 const * session_name, bool live)
	{
		byte const method_index = 3;
		Serialize(stream, method_index);
		Serialize(stream, id);
		Serialize(stream, session_name);
		Serialize(stream, live);
		Flush(stream);
	}

	void DebugToggleChanged(Char8 const * name, bool state)
	{
		byte const method_index = 4;
		Serialize(stream, method_index);
		Serialize(stream, name);
		Serialize(stream, state);
		Flush(stream);
	}

	void StoreBinaryData(Int64 id, Int32 time, Vector<Uint8> data)
	{
		byte const method_index = 5;
		Serialize(stream, method_index);
		Serialize(stream, id);
		Serialize(stream, time);
		Serialize(stream, data);
		Flush(stream);
	}
};


template <typename T>
class RPC_Client_Proxy_IReView_HierarchicalTimelineLog : public RPC_Client_Proxy<T>, public IReView_HierarchicalTimelineLog
{
public:
	RPC_Client_Proxy_IReView_HierarchicalTimelineLog(T& stream) : RPC_Client_Proxy(stream){}

public:
	void SelectionChanged(Int64 selected_id)
	{
		byte const method_index = 0;
		Serialize(stream, method_index);
		Serialize(stream, selected_id);
		Flush(stream);
	}

	void AddTrack(Int64 parent_id, Int64 id, Char8 const * name)
	{
		byte const method_index = 1;
		Serialize(stream, method_index);
		Serialize(stream, parent_id);
		Serialize(stream, id);
		Serialize(stream, name);
		Flush(stream);
	}

	void AddItem(Int64 parent_id, Int64 id, Int32 time, Char8 const * name)
	{
		byte const method_index = 2;
		Serialize(stream, method_index);
		Serialize(stream, parent_id);
		Serialize(stream, id);
		Serialize(stream, time);
		Serialize(stream, name);
		Flush(stream);
	}

	void AddGenericItem(Int64 parent_id, Int64 id, Int32 time, Char8 const * name)
	{
		byte const method_index = 3;
		Serialize(stream, method_index);
		Serialize(stream, parent_id);
		Serialize(stream, id);
		Serialize(stream, time);
		Serialize(stream, name);
		Flush(stream);
	}

	void EndItem(Int64 id, Int32 time)
	{
		byte const method_index = 4;
		Serialize(stream, method_index);
		Serialize(stream, id);
		Serialize(stream, time);
		Flush(stream);
	}

	void AppendLog(Int64 id, Int32 time, Uint32 flags, Char8 const * content)
	{
		byte const method_index = 5;
		Serialize(stream, method_index);
		Serialize(stream, id);
		Serialize(stream, time);
		Serialize(stream, flags);
		Serialize(stream, content);
		Flush(stream);
	}
};


template <typename T>
class RPC_Client_Proxy_IReView_RemoteDebugRenderer : public RPC_Client_Proxy<T>, public IReView_RemoteDebugRenderer
{
public:
	RPC_Client_Proxy_IReView_RemoteDebugRenderer(T& stream) : RPC_Client_Proxy(stream){}

public:
	void RemoveAllPrimitives(Int32 time)
	{
		byte const method_index = 0;
		Serialize(stream, method_index);
		Serialize(stream, time);
		Flush(stream);
	}

	void RemoveAllAnnotations(Int32 time)
	{
		byte const method_index = 1;
		Serialize(stream, method_index);
		Serialize(stream, time);
		Flush(stream);
	}

	void AddAnnotation(Int64 primitive_id, Int32 time, Int32 duration, Char8 const * text, Colorconst &  color)
	{
		byte const method_index = 2;
		Serialize(stream, method_index);
		Serialize(stream, primitive_id);
		Serialize(stream, time);
		Serialize(stream, duration);
		Serialize(stream, text);
		Serialize(stream, color);
		Flush(stream);
	}

	void AddBox(Int64 id, Int32 time, Int32 duration, Matrix3Dconst &  transform, Vector3Dconst &  pivot, Vector3Dconst &  half_size, Colorconst &  color)
	{
		byte const method_index = 3;
		Serialize(stream, method_index);
		Serialize(stream, id);
		Serialize(stream, time);
		Serialize(stream, duration);
		Serialize(stream, transform);
		Serialize(stream, pivot);
		Serialize(stream, half_size);
		Serialize(stream, color);
		Flush(stream);
	}

	void RemovePrimitive(Int64 primitive_id, Int32 time)
	{
		byte const method_index = 4;
		Serialize(stream, method_index);
		Serialize(stream, primitive_id);
		Serialize(stream, time);
		Flush(stream);
	}

	void RemoveAnnotation(Int64 primitive_id, Int32 time)
	{
		byte const method_index = 5;
		Serialize(stream, method_index);
		Serialize(stream, primitive_id);
		Serialize(stream, time);
		Flush(stream);
	}

	void AddCylinder(Int64 id, Int32 time, Int32 duration, Matrix3Dconst &  transform, Vector3Dconst &  pivot, Float64 top_radius, Float64 bottom_radius_scale, Float64 height, Int32 segments, Colorconst &  color, bool create_caps)
	{
		byte const method_index = 6;
		Serialize(stream, method_index);
		Serialize(stream, id);
		Serialize(stream, time);
		Serialize(stream, duration);
		Serialize(stream, transform);
		Serialize(stream, pivot);
		Serialize(stream, top_radius);
		Serialize(stream, bottom_radius_scale);
		Serialize(stream, height);
		Serialize(stream, segments);
		Serialize(stream, color);
		Serialize(stream, create_caps);
		Flush(stream);
	}

	void AddCone(Int64 id, Int32 time, Int32 duration, Matrix3Dconst &  transform, Vector3Dconst &  pivot, Float64 radius, Float64 height, Int32 segments, Colorconst &  color, bool create_caps)
	{
		byte const method_index = 7;
		Serialize(stream, method_index);
		Serialize(stream, id);
		Serialize(stream, time);
		Serialize(stream, duration);
		Serialize(stream, transform);
		Serialize(stream, pivot);
		Serialize(stream, radius);
		Serialize(stream, height);
		Serialize(stream, segments);
		Serialize(stream, color);
		Serialize(stream, create_caps);
		Flush(stream);
	}

	void AddMesh(Int64 id, Int32 time, Int32 duration, Matrix3Dconst &  transform, Vector3Dconst &  pivot)
	{
		byte const method_index = 8;
		Serialize(stream, method_index);
		Serialize(stream, id);
		Serialize(stream, time);
		Serialize(stream, duration);
		Serialize(stream, transform);
		Serialize(stream, pivot);
		Flush(stream);
	}

	void AddTriangle(Int64 mesh_id, Int32 time, Vector3Dconst &  a, Vector3Dconst &  b, Vector3Dconst &  c, Colorconst &  color)
	{
		byte const method_index = 9;
		Serialize(stream, method_index);
		Serialize(stream, mesh_id);
		Serialize(stream, time);
		Serialize(stream, a);
		Serialize(stream, b);
		Serialize(stream, c);
		Serialize(stream, color);
		Flush(stream);
	}

	void AddLine(Int64 id, Int32 time, Int32 duration, Vector3Dconst &  start, Vector3Dconst &  end, Colorconst &  color)
	{
		byte const method_index = 10;
		Serialize(stream, method_index);
		Serialize(stream, id);
		Serialize(stream, time);
		Serialize(stream, duration);
		Serialize(stream, start);
		Serialize(stream, end);
		Serialize(stream, color);
		Flush(stream);
	}

	void AddCircle(Int64 id, Int32 time, Int32 duration, Vector3Dconst &  center, Float64 radius, Vector3Dconst &  up, Int32 segments, Colorconst &  color)
	{
		byte const method_index = 11;
		Serialize(stream, method_index);
		Serialize(stream, id);
		Serialize(stream, time);
		Serialize(stream, duration);
		Serialize(stream, center);
		Serialize(stream, radius);
		Serialize(stream, up);
		Serialize(stream, segments);
		Serialize(stream, color);
		Flush(stream);
	}
};


template <typename  S>
class RPC_Server_Proxy_IReView_Feed : public RPC_Server_Proxy<S, IReView_Feed>
{
public:
	RPC_Server_Proxy_IReView_Feed(S & stream, IReView_Feed* obj) : RPC_Server_Proxy<S,IReView_Feed>(stream, obj){}

public:
	void Receive_Call()
	{
		byte const method_index = Deserialize<byte>(stream);
		switch(method_index)
		{
			case 0: //SendBackBinaryData
			{
				auto const idList = Deserialize<Vector<Int64>>(stream);
				auto const timeList = Deserialize<Vector<Int32>>(stream);
				auto const dataList = Deserialize<Vector<Vector<Uint8>>>(stream);
				this->obj->SendBackBinaryData(idList, timeList, dataList);
			}
			break;

			case 1: //SelectionChanged
			{
				auto const selected_id = Deserialize<Int64>(stream);
				this->obj->SelectionChanged(selected_id);
			}
			break;

			case 2: //DebugToggleChanged
			{
				auto const name = Deserialize<Char8 const *>(stream);
				auto const state = Deserialize<bool>(stream);
				this->obj->DebugToggleChanged(name, state);
			}
			break;

			default:
			{
				On_Invalid_Method_Index(method_index);
			}
			break;
		}
	}
};


template <typename T>
class RPC_Client_Proxy_IReView_StorageServer : public RPC_Client_Proxy<T>, public IReView_StorageServer
{
public:
	RPC_Client_Proxy_IReView_StorageServer(T& stream) : RPC_Client_Proxy(stream){}

public:
	void RequestSessionList()
	{
		byte const method_index = 0;
		Serialize(stream, method_index);
		Flush(stream);
	}

	void RequestSession(Int64 session_id)
	{
		byte const method_index = 1;
		Serialize(stream, method_index);
		Serialize(stream, session_id);
		Flush(stream);
	}

	void PlaybackPositionChanged(Int32 playback_position_time)
	{
		byte const method_index = 2;
		Serialize(stream, method_index);
		Serialize(stream, playback_position_time);
		Flush(stream);
	}
};



#endif//REVIEW_INTEROP_HPP
