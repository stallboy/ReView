/////////////////////////////////////////////////
// THIS FILE IS AUTOGENERATED, DON'T CHANGE IT //
/////////////////////////////////////////////////
#ifndef ____CPPTEST_REVIEW_INTEROP_HPP
#define ____CPPTEST_REVIEW_INTEROP_HPP

#include "interop.hpp"
#include <vector>



class IReView_Feed
{
public:
	virtual void SendBackBinaryData(std::vector<long long> idList, std::vector<int> timeList, std::vector<std::vector<unsigned char>> dataList) =0;

	virtual void SelectionChanged(long long selected_id) =0;

	virtual void DebugToggleChanged(const char* name, bool state) =0;
};


class IReView_Tool
{
public:
	virtual void Heartbeat(int time) =0;

	virtual void DebugToggleChanged(const char* name, bool state) =0;

	virtual void StoreBinaryData(long long id, int time, std::vector<unsigned char> data) =0;
};


class IReView_HierarchicalTimelineLog
{
public:
	virtual void SelectionChanged(long long selected_id) =0;

	virtual void AddTrack(long long parent_id, long long id, const char* name) =0;

	virtual void AddItem(long long parent_id, long long id, int time, const char* name) =0;

	virtual void AddGenericItem(long long parent_id, long long id, int time, const char* name) =0;

	virtual void EndItem(long long id, int time) =0;

	virtual void AppendLog(long long id, int time, unsigned int flags, const char* content) =0;
};


class IReView_RemoteDebugRenderer
{
public:
	virtual void RemoveAllPrimitives(int time) =0;

	virtual void RemoveAllAnnotations(int time) =0;

	virtual void AddAnnotation(long long primitive_id, int time, int duration, const char* text, const Color& color) =0;

	virtual void AddBox(long long id, int time, int duration, const Matrix3D& transform, const Vector3D& pivot, const Vector3D& half_size, const Color& color) =0;

	virtual void RemovePrimitive(long long primitive_id, int time) =0;

	virtual void RemoveAnnotation(long long primitive_id, int time) =0;

	virtual void AddCylinder(long long id, int time, int duration, const Matrix3D& transform, const Vector3D& pivot, double top_radius, double bottom_radius_scale, double height, int segments, const Color& color, bool create_caps) =0;

	virtual void AddCone(long long id, int time, int duration, const Matrix3D& transform, const Vector3D& pivot, double radius, double height, int segments, const Color& color, bool create_caps) =0;

	virtual void AddMesh(long long id, int time, int duration, const Matrix3D& transform, const Vector3D& pivot) =0;

	virtual void AddTriangle(long long mesh_id, int time, const Vector3D& a, const Vector3D& b, const Vector3D& c, const Color& color) =0;

	virtual void AddLine(long long id, int time, int duration, const Vector3D& start, const Vector3D& end, const Color& color) =0;

	virtual void AddCircle(long long id, int time, int duration, const Vector3D& center, double radius, const Vector3D& up, int segments, const Color& color) =0;
};


template <typename T>
class RPC_Client_Proxy_IReView_Tool : public RPC_Client_Proxy<T>, public IReView_Tool
{
public:
	RPC_Client_Proxy_IReView_Tool(T& stream) : RPC_Client_Proxy(stream){ Set_prefix((unsigned char)1); }

public:
	void Heartbeat(int time)
	{
		Begin();
		const byte method_index = 0;
		Serialize(stream, method_index);
		Serialize(stream, time);
		Flip();
		End();
	}

	void DebugToggleChanged(const char* name, bool state)
	{
		Begin();
		const byte method_index = 1;
		Serialize(stream, method_index);
		Serialize(stream, name);
		Serialize(stream, state);
		Flip();
		End();
	}

	void StoreBinaryData(long long id, int time, std::vector<unsigned char> data)
	{
		Begin();
		const byte method_index = 2;
		Serialize(stream, method_index);
		Serialize(stream, id);
		Serialize(stream, time);
		Serialize(stream, data);
		Flip();
		End();
	}
};


template <typename T>
class RPC_Client_Proxy_IReView_HierarchicalTimelineLog : public RPC_Client_Proxy<T>, public IReView_HierarchicalTimelineLog
{
public:
	RPC_Client_Proxy_IReView_HierarchicalTimelineLog(T& stream) : RPC_Client_Proxy(stream){ Set_prefix((unsigned char)2); }

public:
	void SelectionChanged(long long selected_id)
	{
		Begin();
		const byte method_index = 0;
		Serialize(stream, method_index);
		Serialize(stream, selected_id);
		Flip();
		End();
	}

	void AddTrack(long long parent_id, long long id, const char* name)
	{
		Begin();
		const byte method_index = 1;
		Serialize(stream, method_index);
		Serialize(stream, parent_id);
		Serialize(stream, id);
		Serialize(stream, name);
		Flip();
		End();
	}

	void AddItem(long long parent_id, long long id, int time, const char* name)
	{
		Begin();
		const byte method_index = 2;
		Serialize(stream, method_index);
		Serialize(stream, parent_id);
		Serialize(stream, id);
		Serialize(stream, time);
		Serialize(stream, name);
		Flip();
		End();
	}

	void AddGenericItem(long long parent_id, long long id, int time, const char* name)
	{
		Begin();
		const byte method_index = 3;
		Serialize(stream, method_index);
		Serialize(stream, parent_id);
		Serialize(stream, id);
		Serialize(stream, time);
		Serialize(stream, name);
		Flip();
		End();
	}

	void EndItem(long long id, int time)
	{
		Begin();
		const byte method_index = 4;
		Serialize(stream, method_index);
		Serialize(stream, id);
		Serialize(stream, time);
		Flip();
		End();
	}

	void AppendLog(long long id, int time, unsigned int flags, const char* content)
	{
		Begin();
		const byte method_index = 5;
		Serialize(stream, method_index);
		Serialize(stream, id);
		Serialize(stream, time);
		Serialize(stream, flags);
		Serialize(stream, content);
		Flip();
		End();
	}
};


template <typename T>
class RPC_Client_Proxy_IReView_RemoteDebugRenderer : public RPC_Client_Proxy<T>, public IReView_RemoteDebugRenderer
{
public:
	RPC_Client_Proxy_IReView_RemoteDebugRenderer(T& stream) : RPC_Client_Proxy(stream){ Set_prefix((unsigned char)3); }

public:
	void RemoveAllPrimitives(int time)
	{
		Begin();
		const byte method_index = 0;
		Serialize(stream, method_index);
		Serialize(stream, time);
		Flip();
		End();
	}

	void RemoveAllAnnotations(int time)
	{
		Begin();
		const byte method_index = 1;
		Serialize(stream, method_index);
		Serialize(stream, time);
		Flip();
		End();
	}

	void AddAnnotation(long long primitive_id, int time, int duration, const char* text, const Color& color)
	{
		Begin();
		const byte method_index = 2;
		Serialize(stream, method_index);
		Serialize(stream, primitive_id);
		Serialize(stream, time);
		Serialize(stream, duration);
		Serialize(stream, text);
		Serialize(stream, color);
		Flip();
		End();
	}

	void AddBox(long long id, int time, int duration, const Matrix3D& transform, const Vector3D& pivot, const Vector3D& half_size, const Color& color)
	{
		Begin();
		const byte method_index = 3;
		Serialize(stream, method_index);
		Serialize(stream, id);
		Serialize(stream, time);
		Serialize(stream, duration);
		Serialize(stream, transform);
		Serialize(stream, pivot);
		Serialize(stream, half_size);
		Serialize(stream, color);
		Flip();
		End();
	}

	void RemovePrimitive(long long primitive_id, int time)
	{
		Begin();
		const byte method_index = 4;
		Serialize(stream, method_index);
		Serialize(stream, primitive_id);
		Serialize(stream, time);
		Flip();
		End();
	}

	void RemoveAnnotation(long long primitive_id, int time)
	{
		Begin();
		const byte method_index = 5;
		Serialize(stream, method_index);
		Serialize(stream, primitive_id);
		Serialize(stream, time);
		Flip();
		End();
	}

	void AddCylinder(long long id, int time, int duration, const Matrix3D& transform, const Vector3D& pivot, double top_radius, double bottom_radius_scale, double height, int segments, const Color& color, bool create_caps)
	{
		Begin();
		const byte method_index = 6;
		Serialize(stream, method_index);
		Serialize(stream, id);
		Serialize(stream, time);
		Serialize(stream, duration);
		Serialize(stream, transform);
		Serialize(stream, pivot);
		Serialize(stream, top_radius);
		Serialize(stream, bottom_radius_scale);
		Serialize(stream, height);
		Serialize(stream, segments);
		Serialize(stream, color);
		Serialize(stream, create_caps);
		Flip();
		End();
	}

	void AddCone(long long id, int time, int duration, const Matrix3D& transform, const Vector3D& pivot, double radius, double height, int segments, const Color& color, bool create_caps)
	{
		Begin();
		const byte method_index = 7;
		Serialize(stream, method_index);
		Serialize(stream, id);
		Serialize(stream, time);
		Serialize(stream, duration);
		Serialize(stream, transform);
		Serialize(stream, pivot);
		Serialize(stream, radius);
		Serialize(stream, height);
		Serialize(stream, segments);
		Serialize(stream, color);
		Serialize(stream, create_caps);
		Flip();
		End();
	}

	void AddMesh(long long id, int time, int duration, const Matrix3D& transform, const Vector3D& pivot)
	{
		Begin();
		const byte method_index = 8;
		Serialize(stream, method_index);
		Serialize(stream, id);
		Serialize(stream, time);
		Serialize(stream, duration);
		Serialize(stream, transform);
		Serialize(stream, pivot);
		Flip();
		End();
	}

	void AddTriangle(long long mesh_id, int time, const Vector3D& a, const Vector3D& b, const Vector3D& c, const Color& color)
	{
		Begin();
		const byte method_index = 9;
		Serialize(stream, method_index);
		Serialize(stream, mesh_id);
		Serialize(stream, time);
		Serialize(stream, a);
		Serialize(stream, b);
		Serialize(stream, c);
		Serialize(stream, color);
		Flip();
		End();
	}

	void AddLine(long long id, int time, int duration, const Vector3D& start, const Vector3D& end, const Color& color)
	{
		Begin();
		const byte method_index = 10;
		Serialize(stream, method_index);
		Serialize(stream, id);
		Serialize(stream, time);
		Serialize(stream, duration);
		Serialize(stream, start);
		Serialize(stream, end);
		Serialize(stream, color);
		Flip();
		End();
	}

	void AddCircle(long long id, int time, int duration, const Vector3D& center, double radius, const Vector3D& up, int segments, const Color& color)
	{
		Begin();
		const byte method_index = 11;
		Serialize(stream, method_index);
		Serialize(stream, id);
		Serialize(stream, time);
		Serialize(stream, duration);
		Serialize(stream, center);
		Serialize(stream, radius);
		Serialize(stream, up);
		Serialize(stream, segments);
		Serialize(stream, color);
		Flip();
		End();
	}
};


template <typename T>
class RPC_Client_Proxy_IReView_Feed : public RPC_Client_Proxy<T>, public IReView_Feed
{
public:
	RPC_Client_Proxy_IReView_Feed(T& stream) : RPC_Client_Proxy(stream){ Set_prefix((unsigned char)0); }

public:
	void SendBackBinaryData(std::vector<long long> idList, std::vector<int> timeList, std::vector<std::vector<unsigned char>> dataList)
	{
		Begin();
		const byte method_index = 0;
		Serialize(stream, method_index);
		Serialize(stream, idList);
		Serialize(stream, timeList);
		Serialize(stream, dataList);
		Flip();
		End();
	}

	void SelectionChanged(long long selected_id)
	{
		Begin();
		const byte method_index = 1;
		Serialize(stream, method_index);
		Serialize(stream, selected_id);
		Flip();
		End();
	}

	void DebugToggleChanged(const char* name, bool state)
	{
		Begin();
		const byte method_index = 2;
		Serialize(stream, method_index);
		Serialize(stream, name);
		Serialize(stream, state);
		Flip();
		End();
	}
};



#endif//____CPPTEST_REVIEW_INTEROP_HPP
